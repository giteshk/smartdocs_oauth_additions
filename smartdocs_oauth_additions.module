<?php
/**
 * @file
 * SmartDocs OAuth additions.
 */

use Apigee\SmartDocs\Model;
use Apigee\SmartDocs\Security;
use Apigee\SmartDocs\Security\Oauth2Scheme;

const SMARTDOCS_OAUTH_ADDITIONS_SECURITY_TABLE = 'smartdocs_oauth_additions_security';
const SMARTDOCS_OAUTH_ADDITIONS_DEVELOPER_APP_STATUS_APPROVED = 'approved';

/**
 * Implements hook_preprocess_HOOK().
 *
 * On SmartDocs pages add the logic for Oauth Client Credentials Grant.
 *
 * This module is a hack to allow SmartDocs to create a widget for Client
 * Credential Grants.
 *
 * The Edge backend cannot process this information.
 */
function smartdocs_oauth_additions_preprocess_page(&$variables){
  $item = menu_get_item();
  if($item['map'][0] == 'node' && $item['map'][1]->type == 'smart_method'){
    $oauth_schemes = array();
    $config = devconnect_default_org_config();
    $node = $item['map'][1];

    // Try to load the model taxonomy term.
    if (!empty($node->field_smart_method_model[LANGUAGE_NONE][0]['taxonomy_term'])) {
      $model_term = &$node->field_smart_method_model[LANGUAGE_NONE][0]['taxonomy_term'];
    }
    elseif (!empty($node->field_smart_method_model[LANGUAGE_NONE][0]['tid'])) {
      $model_term = taxonomy_term_load($node->field_smart_method_model[LANGUAGE_NONE][0]['tid']);
    }

    if (!empty($model_term)) {
      // Load model.
      $model = new Model($config);
      $model->load($model_term->name);

      // Load model's revision.
      $revision = new \Apigee\SmartDocs\Revision($config, $model->getUuid());
      $revision->load($node->field_smart_method_revision_num[LANGUAGE_NONE][0]['value']);

      $security = new Security($config, $model_term->name, $node->field_smart_method_revision_num[LANGUAGE_NONE][0]['value']);
      foreach($node->field_smart_method_security[LANGUAGE_NONE] as $row){
        $scheme = $security->load($row['value']);
        if($scheme instanceof Oauth2Scheme) {
          $accessTokenUrl = drupal_parse_url(_smartdocs_oauth_additions_get_access_token_url($model->getUuid(), $revision->getUuid(), $row['value']));
          $oauth_schemes[$row['value']] = $accessTokenUrl['query']['grant_type'];
        }
      }
      if(!empty($oauth_schemes)){
        $form = drupal_get_form('smartdocs_oauth_additions_form', $node, $oauth_schemes);
        drupal_add_js(array('apigee_oauth_additions_form' => drupal_render($form)), 'setting');
        drupal_add_library("system", "drupal.ajax");
        drupal_add_js(drupal_get_path('module', 'smartdocs_oauth_additions') ."/smartdocs_oauth_additions.js");
      }
    }
  }
}

/**
 * Form builder.
 *
 * Form to accept Username and password so that it we can generate the access
 * token.
 *
 * @param $form
 * @param $form_state
 * @param $node
 * @param $oauth_schemes
 *
 * @return mixed
 */
function smartdocs_oauth_additions_form($form, $form_state, $node, $oauth_schemes) {
  if(empty($oauth_schemes)) {
    return $form;
  }
  $options = array();
  if (user_is_logged_in()) {
    global $user;
    $app_entities = entity_load('developer_app', FALSE, array('mail' => $user->mail));
    array_walk($app_entities, function ($app) use (&$options) {
      if ($app->credentialStatus == SMARTDOCS_OAUTH_ADDITIONS_DEVELOPER_APP_STATUS_APPROVED) {
        $options[$app->name] = $app->attributes['DisplayName'];
      }
    });
    asort($options);
  }
  $form['user_app'] = array(
    '#title' => 'API Key to use for the API call',
    '#type' => 'select',
    '#options' => array('default' => 'Default Credentials') + $options,
    '#description' => 'Choose one of your apps to use. You can request an app to be created by clicking ' . l('here', 'user/me/apps'),
  );
  if(in_array('password', $oauth_schemes)){
    $form['client_username'] = array(
      '#title' => 'Username',
      '#type' => 'textfield',
      '#description' => 'Please enter the username',
    );
    $form['client_password'] = array(
      '#title' => 'Password',
      '#type' => 'password',
      '#description' => 'Please enter the password',
    );
  }
  $model_term = taxonomy_term_load($node->field_smart_method_model[LANGUAGE_NONE][0]['tid']);
  $form['model'] = array(
    '#type' => 'value',
    '#value' => $model_term->name,
  );
  $form['revision'] = array(
    '#type' => 'value',
    '#value' => $node->field_smart_method_revision_num[LANGUAGE_NONE][0]['value'],
  );
  $form['security'] = array(
    '#type' => 'value',
    '#value' => $oauth_schemes,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Generate OAuth Token'),
    '#ajax' => array(
      'callback' => 'smartdocs_oauth_additions_form_generate_token',
    )
  );

  $form['#attached']['js'][] = drupal_get_path('module', 'smartdocs_oauth_additions') . "/smartdocs_oauth_additions.js";
  return $form;
}

/**
 * Submit function to generate access token for the Oauth client Credentials
 *
 * @param $form
 * @param $form_state
 * @return array
 */
function smartdocs_oauth_additions_form_generate_token($form, $form_state){
  $config = devconnect_default_org_config();

  $node = &$form_state['build_info']['args'][0];
  // Try to load the model taxonomy term.
  if (!empty($node->field_smart_method_model[LANGUAGE_NONE][0]['taxonomy_term'])) {
    $model_term = &$node->field_smart_method_model[LANGUAGE_NONE][0]['taxonomy_term'];
  }
  elseif (!empty($node->field_smart_method_model[LANGUAGE_NONE][0]['tid'])) {
    $model_term = taxonomy_term_load($node->field_smart_method_model[LANGUAGE_NONE][0]['tid']);
  }

  // Exit if the model term wasn't successfully loaded.
  if (empty($model_term)) {
    watchdog(__FUNCTION__, 'Failed to load model term.');
    return array('#type' => 'ajax', '#commands' => array(ajax_command_alert(t('Failed to load model term!'))));
  }

  // Load model.
  $model = new Model($config);
  $model->load($model_term->name);

  // Load model's revision.
  $revision = new \Apigee\SmartDocs\Revision($config, $model->getUuid());
  $revision->load($model->getLatestRevisionNumber());

  $security = new \Apigee\SmartDocs\Security($config, $form_state['values']['model'], $form_state['values']['revision']);
  foreach($form_state['values']['security'] as $scheme_name => $grant_type) {
    $scheme = $security->load($scheme_name);
    if($scheme instanceof \Apigee\SmartDocs\Security\Oauth2Scheme) {
      $template_auth = new \Apigee\SmartDocs\TemplateAuth($config,  $form_state['values']['model']);
      $template_auth_scheme = $template_auth->load($scheme_name);
      if($template_auth_scheme instanceof \Apigee\SmartDocs\Security\Oauth2TemplateAuthScheme){
        $oauth2_credentials = array();
        $oauth2_credentials['ERRORCODE'] = '';
        $oauth2_credentials['ERRORMESSAGE'] = '';
        $oauth2_credentials['ACCESSTOKEN']  = '';
        $oauth2_credentials['ACCESSTOKENTYPE'] = 'bearer';
        $oauth2_credentials['ACCESSTOKENPARAMNAME'] = 'access_token';
        $oauth2_credentials['PROXYURL'] = '';

        $client_id = $template_auth_scheme->getClientId();
        $client_secret = $template_auth_scheme->getClientSecret();

        if($form_state['values']['user_app'] !== 'default' && user_is_logged_in()){
          global $user;
          $entity = entity_load('developer_app',array(), array('mail' => $user->mail, 'name' => $form_state['values']['user_app']));
          $entity = reset($entity);
          $client_id = $entity->consumerKey;
          $client_secret = $entity->consumerSecret;
        }

        $credentials = array();
        if ($grant_type == 'password') {
          $credentials['username'] = $form_state['values']['client_username'];
          $credentials['password'] = $form_state['values']['client_password'];
        }

        $url = _smartdocs_oauth_additions_get_access_token_url($model->getUuid(), $revision->getUuid(), $scheme_name);

        $ch = curl_init($url);
        curl_setopt_array($ch, array(
          CURLOPT_AUTOREFERER => TRUE,
          CURLOPT_FOLLOWLOCATION => TRUE,
          CURLOPT_MAXREDIRS => 5,
          CURLOPT_POST => TRUE,
          CURLOPT_POSTFIELDS => drupal_http_build_query(array(
              'client_id' => $client_id,
              'client_secret' => $client_secret,
              'grant_type' => $grant_type,
            ) + $credentials),
          CURLOPT_RETURNTRANSFER => TRUE,
        ));

        $response = curl_exec($ch);
        $info = curl_getinfo($ch);
        curl_close($ch);

        if ($info['http_code'] != 200) {
          $oauth2_credentials['ERRORCODE'] = &$info['http_code'];

          $json_response = drupal_json_decode($response);
          if (json_last_error() == JSON_ERROR_NONE) {
            $oauth2_credentials['ERRORMESSAGE'] = '<pre>' . print_r($json_response, TRUE) . '</pre>';
          }
          else {
            $oauth2_credentials['ERRORMESSAGE'] = strip_tags($response);
          }
        }
        else {
          $json_response = drupal_json_decode($response);
          $json_error = json_last_error();
          if ($json_error == JSON_ERROR_NONE) {
            $oauth2_credentials['ACCESSTOKEN']  = $json_response[$oauth2_credentials['ACCESSTOKENPARAMNAME']];
            $oauth2_credentials['ACCESSTOKENTYPE'] = $json_response['token_type'];
          }
          else {
            $oauth2_credentials['ERRORCODE'] = $json_error;
            $oauth2_credentials['ERRORMESSAGE'] = t('JSON decode error: %error.', array('%error' => json_last_error_msg())) . '<hr>' . strip_tags($response);
          }
        }

        return array(
          '#type' => 'ajax',
          '#commands' => array(
            array(
              'command' => 'setAccessTokenAndLocation',
              'data' => $oauth2_credentials
            ),
            ajax_command_invoke('[data-dismiss="modal"]', 'click', array()),
          ),
        );
      }
    }
  }

  return array('#type' => 'ajax', '#commands' => array(ajax_command_alert("Something went wrong!")));
}

/**
 * Helper function to get access token url for a model.
 *
 * @param $model_id
 *   Model ID.
 * @param $revision_id
 *   Revision ID.
 * @param $scheme_name
 *   The name of the security scheme.
 *
 * @return string|null
 *   Returns the "Access Token URL", or null if not found for the model.
 *
 */
function _smartdocs_oauth_additions_get_access_token_url($model_id, $revision_id, $scheme_name) {
  return db_select(SMARTDOCS_OAUTH_ADDITIONS_SECURITY_TABLE, 's')
    ->fields('s', array('access_token_url'))
    ->condition('model_id', $model_id)
    ->condition('revision_id', $revision_id)
    ->condition('scheme_name', $scheme_name)
    ->execute()
    ->fetchField();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function smartdocs_oauth_additions_form_smartdocs_model_security_scheme_alter(&$form, $form_state){
  // Add additional messages around the SmartDocs security settings form.
  drupal_set_message(t('You have smartdocs_oauth_additions module enabled.<br>
You should pass the "grant_type" as a query parameter in the "Access token url" field.<br>
This will let the module provide OAuth widgets.)'), "warning");

  $form['auth_fields']['accessTokenUrl']['#required'] = TRUE;

  if ($form['scheme_action']['#value'] == 'Update') {
    $menu_item = menu_get_item();
    $form['auth_fields']['accessTokenUrl']['#default_value'] = _smartdocs_oauth_additions_get_access_token_url($menu_item['page_arguments'][1]['id'], $menu_item['page_arguments'][2]['id'], $menu_item['page_arguments'][3]);
  }

  // Validate and save Access Token URL field's value.
  $form['#validate'][] = 'smartdocs_oauth_additions_form_smartdocs_model_security_scheme_validate';
  $form['#submit'][] = 'smartdocs_oauth_additions_form_smartdocs_model_security_scheme_submit';
}

/**
 * Validate callback.
 *
 * Make the user enter the grant_type in the Access Token URL field.
 * We have to do this since the EDGE backend doesn't support this options right
 * now.
 */
function smartdocs_oauth_additions_form_smartdocs_model_security_scheme_validate($form, &$form_state){
  $access_token_url = drupal_parse_url($form_state['values']['auth_fields']['accessTokenUrl']);
  if(!isset($access_token_url['query']['grant_type'])){
    form_error($form['auth_fields']['accessTokenUrl'], t('The grant_type is not set in the Access Token URL'));
  }
  elseif (!in_array($access_token_url['query']['grant_type'], array('client_credentials', 'password'))) {
    form_error($form['auth_fields']['accessTokenUrl'], t('The grant type must be either "client_credentials" or "password".'));
  }
}

/**
 * Submit callback.
 *
 * Save "Access Token URL" to a custom table, since the EDGE backend doesn't
 * support this right now.
 */
function smartdocs_oauth_additions_form_smartdocs_model_security_scheme_submit($form, &$form_state) {
  if ($form_state['values']['type'] == 'OAUTH2') {
    try {
      // Get existing access token url entry.
      $id = db_select(SMARTDOCS_OAUTH_ADDITIONS_SECURITY_TABLE, 's')
        ->fields('s', array('id'))
        ->condition('model_id', $form_state['values']['model']['id'])
        ->condition('revision_id', $form_state['values']['revision']['id'])
        ->condition('scheme_name', $form_state['values']['scheme_name'])
        ->execute()
        ->fetchField();

      if (empty($id)) {
        db_insert(SMARTDOCS_OAUTH_ADDITIONS_SECURITY_TABLE)
          ->fields(array(
            'model_id' => $form_state['values']['model']['id'],
            'revision_id' => $form_state['values']['revision']['id'],
            'scheme_name' => $form_state['values']['scheme_name'],
            'access_token_url' => $form_state['values']['auth_fields']['accessTokenUrl'],
          ))
          ->execute();
      }
      else {
        db_update(SMARTDOCS_OAUTH_ADDITIONS_SECURITY_TABLE)
          ->fields(array(
            'access_token_url' => $form_state['values']['auth_fields']['accessTokenUrl'],
          ))
          ->condition('id', $id)
          ->execute();
      }
    }
    catch (Exception $e) {
      drupal_set_message(t('Failed to save value for "Access Token URL".'), 'error');
      watchdog_exception(__FUNCTION__, $e, 'Failed to save value for "Access Token URL".');
    }
  }
}
