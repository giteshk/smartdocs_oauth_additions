<?php

/**
 * On SmartDocs pages add the logic for Oauth Client Credentials Grant
 *
 * This module is a hack to allow SmartDocs to create a widget for Client Credential Grants
 *
 * The Edge backend cannot process this information.
 *
 * @param $vars
 */
function smartdocs_oauth_additions_preprocess_page(&$vars){
  $item = menu_get_item();
  if($item['map'][0] == 'node' && $item['map'][1]->type == 'smart_method'){
    $oauth_schemes = array();
    $config = devconnect_default_org_config();
    $node = $item['map'][1];

    // Try to load the model taxonomy term.
    if (!empty($node->field_smart_method_model[LANGUAGE_NONE][0]['taxonomy_term'])) {
      $model_term = &$node->field_smart_method_model[LANGUAGE_NONE][0]['taxonomy_term'];
    }
    elseif (!empty($node->field_smart_method_model[LANGUAGE_NONE][0]['tid'])) {
      $model_term = taxonomy_term_load($node->field_smart_method_model[LANGUAGE_NONE][0]['tid']);
    }

    if (!empty($model_term)) {
      $security = new \Apigee\SmartDocs\Security($config, $model_term->name, $node->field_smart_method_revision_num[LANGUAGE_NONE][0]['value']);
      foreach($node->field_smart_method_security[LANGUAGE_NONE] as $row){
        $scheme = $security->load($row['value']);
        if($scheme instanceof \Apigee\SmartDocs\Security\Oauth2Scheme) {
          $accessTokenUrl = drupal_parse_url($scheme->getAccessTokenUrl());
          $oauth_schemes[$row['value']] = $accessTokenUrl['query']['grant_type'];
        }
      }
      if(!empty($oauth_schemes)){
        $form = drupal_get_form('smartdocs_oauth_additions_form', $node, $oauth_schemes);
        drupal_add_js(array('apigee_oauth_additions_form' => drupal_render($form)), 'setting');
        drupal_add_library("system", "drupal.ajax");
        drupal_add_js(drupal_get_path('module', 'smartdocs_oauth_additions') ."/smartdocs_oauth_additions.js");
      }
    }
  }
}

/**
 * Form to accept Username and password so that it we can generate the access token
 *
 * @param $form
 * @param $form_state
 * @param $node
 * @param $oauth_schemes
 * @return mixed
 */
function smartdocs_oauth_additions_form($form, $form_state, $node, $oauth_schemes){
  if(empty($oauth_schemes)) {
    return $form;
  }
  $options = array();
  if (user_is_logged_in()) {
    global $user;
    $app_entities = entity_load('developer_app', FALSE, array('mail' => $user->mail));
    array_walk($app_entities, function ($app) use (&$options, $api_products) {
      // TODO Each Developer app status should be stored in constants on
      // the Drupal side. Ex.: DEVELOPER_APP_STATUS_APPROVED.
      if ($app->credentialStatus == 'approved' && !array_intersect($api_products, $app->apiProducts)) {
        $options[$app->name] = $app->attributes['DisplayName'];
      }
    });
    asort($options);
  }
  $form['user_app'] = array(
    '#title' => 'API Key to use for the API call',
    '#type' => 'select',
    '#options' => array('default' => 'Default Credentials') + $options,
    '#description' => 'Choose one of your apps to use. You can request an app to be created by clicking ' . l('here', 'user/me/apps'),
  );
  if(in_array('password', $oauth_schemes)){
    $form['client_username'] = array(
      '#title' => 'Username',
      '#type' => 'textfield',
      '#description' => 'Please enter the username',
    );
    $form['client_password'] = array(
      '#title' => 'Password',
      '#type' => 'password',
      '#description' => 'Please enter the password',
    );
  }
  $model_term = taxonomy_term_load($node->field_smart_method_model[LANGUAGE_NONE][0]['tid']);
  $form['model'] = array(
    '#type' => 'value',
    '#value' => $model_term->name,
  );
  $form['revision'] = array(
    '#type' => 'value',
    '#value' => $node->field_smart_method_revision_num[LANGUAGE_NONE][0]['value'],
  );
  $form['security'] = array(
    '#type' => 'value',
    '#value' => $oauth_schemes,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Generate OAuth Token'),
    '#ajax' => array(
      'callback' => 'smartdocs_oauth_additions_form_generate_token',
    )
  );

  $form['#attached']['js'][] = drupal_get_path('module', 'smartdocs_oauth_additions') . "/smartdocs_oauth_additions.js";
  return $form;
}

/**
 * Submit function to generate access token for the Oauth client Credentials
 *
 * @param $form
 * @param $form_state
 * @return array
 */
function smartdocs_oauth_additions_form_generate_token($form, $form_state){
  $config = devconnect_default_org_config();
  $security = new \Apigee\SmartDocs\Security($config, $form_state['values']['model'], $form_state['values']['revision']);
  foreach($form_state['values']['security'] as $scheme_name => $grant_type) {
    $scheme = $security->load($scheme_name);
    if ($scheme instanceof \Apigee\SmartDocs\Security\Oauth2Scheme) {

      // Don't use template auth unless it exists.
      $template_auth_exists = FALSE;
      $template_auth = new \Apigee\SmartDocs\TemplateAuth($config, $form_state['values']['model']);
      try {
        $template_auth_scheme = $template_auth->load($scheme_name);
      }
      catch (Exception $e) {
        // Template auth doesn't exist, no need to throwing an exception.
      }

      // If template auth for model is created.
      if ($template_auth_scheme instanceof \Apigee\SmartDocs\Security\Oauth2TemplateAuthScheme) {
        $template_auth_exists = TRUE;
        // Use model template auth client_id and client_secret.
        $client_id = $template_auth_scheme->getClientId();
        $client_secret = $template_auth_scheme->getClientSecret();
      }

      // Creating oauth2 request information.
      $oauth2Credentials = array();
      $oauth2Credentials['ERRORCODE'] = '';
      $oauth2Credentials['ERRORMESSAGE'] = '';
      $oauth2Credentials['ACCESSTOKEN'] = '';
      $oauth2Credentials['ACCESSTOKENTYPE'] = 'bearer';
      $oauth2Credentials['ACCESSTOKENPARAMNAME'] = 'access_token';
      $oauth2Credentials['PROXYURL'] = '';

      $postBody = array();

      // If user app is selected and user is logged in, get client_id and client_secret from app.
      if ($form_state['values']['user_app'] !== 'default' && user_is_logged_in() && !$template_auth_exists) {
        global $user;
        $entity = entity_load('developer_app', array(), array('mail' => $user->mail, 'name' => $form_state['values']['user_app']));
        $entity = reset($entity);
        $client_id = $entity->consumerKey;
        $client_secret = $entity->consumerSecret;
      }

      // Set up client_id and secret for basic authentication.
      if ($grant_type == 'client_credentials') {
        $client_config = array(
          'request.options' =>
            array(
              'auth' => array(
                $client_id,
                $client_secret,
                'basic',
              )
            )
        );
      }
      // Using password grant type.
      else if ($grant_type == 'password') {
        $postBody['client_id'] = $client_id;
        $postBody['client_secret'] = $client_secret;
        $client_config = array(
          'request.options' => array(
            'auth' => array(
              $form_state['values']['client_username'],
              $form_state['values']['client_password'],
              'basic',
            )
          )
        );
      }
      $client = new \Guzzle\Http\Client($scheme->getAccessTokenUrl(), $client_config);
      $request = $client->post('', array('Content-Type' => 'application/x-www-form-urlencoded'), drupal_http_build_query($postBody));
      try {
        $response = $request->send();
        $oauth_res = json_decode($response->getBody(TRUE));
        $oauth2Credentials['ACCESSTOKEN'] = $oauth_res->access_token;
      }
      catch (\Guzzle\Http\Exception\BadResponseException $e) {
        $response = $e->getResponse();
        $error_res = json_decode($response->getBody(TRUE));
        $oauth2Credentials['ERRORCODE'] = $error_res->errorCode;
        $oauth2Credentials['ERRORMESSAGE'] = $error_res->remediation;
      }
      catch (Exception $e) {
        $oauth2Credentials['ERRORCODE'] = $e->getCode();
        $oauth2Credentials['ERRORMESSAGE'] = $e->getMessage();
      }
      return array('#type' => 'ajax', '#commands' => array(
        array('command' => 'setAccessTokenAndLocation', 'data' => $oauth2Credentials),
        ajax_command_invoke('[data-dismiss="modal"]', 'click', array()),
      ));
    }
  }
  return  array('#type' => 'ajax', '#commands' => array(ajax_command_alert("Something went wrong !!")));
}

/**
 * Add additional messages around the SmartDocs security settings form.
 * @param $form
 * @param $form_state
 */
function smartdocs_oauth_additions_form_smartdocs_model_security_scheme_alter(&$form, $form_state){
  $message = <<<__STR__
You have smartdocs_oauth_additions module enabled.
You should pass the "grant_type" as a query parameter in the "Access token url" field.
This will let the module provide OAuth widgets.
__STR__;

  drupal_set_message(t($message), "warning");
  $form['#validate'][] = 'smartdocs_oauth_additions_form_smartdocs_model_security_scheme_validate';
}

/**
 * Make the user enter the grant_type in the Access Token URL field.
 * We have to do this since the backend doesn't support this options right now.
 *
 * @param $form
 * @param $form_state
 */
function smartdocs_oauth_additions_form_smartdocs_model_security_scheme_validate($form, $form_state){
    if(isset($form_state['values']['auth_fields']['accessTokenUrl'])) {
        $accesstokenurl = drupal_parse_url($form_state['values']['auth_fields']['accessTokenUrl']);
        if (!isset($accesstokenurl['query']['grant_type'])) {
            form_set_error('values][auth_fields][accessTokenUrl', "grant_type is not set in the Access Token URL");
        }
    }
}